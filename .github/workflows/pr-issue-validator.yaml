name: Validate Pull Request

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited
      - reopened
    branches:
      - 'main'
      - 'release-**'
      - 'master'
    # paths-ignore:
    #   - 'docs/**'
    #   - '.github/'
    #   - 'CHANGELOG/'
    #   - 'charts/'
    #   - 'manifests/'
    #   - 'sample-docker-templates/'
  
jobs:
  validate-PR-issue:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # with:
      #   repository: rishabhtayal72/hello-world
      #   token: ${{ secrets.MY_PAT }}

    - name: Validate Issue Reference
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_BODY: ${{ github.event.pull_request.body }}
        url: ${{ github.event.pull_request.url }}
        PRNUM: ${{ github.event.pull_request.number }}
        TITLE: ${{ github.event.pull_request.title }}
      run: |
        echo "base or target repo : ${{ github.event.pull_request.base.repo.full_name }}"
        echo "head or source repo : ${{ github.event.pull_request.head.repo.full_name }}"
        if [[ ${{ github.event.pull_request.head.repo.full_name }} == ${{ github.event.pull_request.base.repo.full_name }} ]]; then
          export forked=false
        else
          export forked=true
        fi
        echo "forked: $forked"
        set -x
        if [[ "$TITLE" == *"doc:"* || "$TITLE" == *"docs:"* || "$TITLE" == *"chore:"* ]]; then
          echo "Skipping validation as this is a PR for documentation or chore."
          if [[ $forked == true ]]; then
            echo "PR:Ready-to-Review, exiting gracefully"
            exit 0
          fi
          gh pr edit $PRNUM --remove-label "PR:Issue-verification-failed"
          gh pr edit $PRNUM --add-label "PR:Ready-to-Review"
          exit 0
        fi
        pattern="((Fixes|Resolves) #[0-9]+)"
        
        echo "pattern = $pattern"
        
        # Get the pull request body
        PR_BODY=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH)
        
        echo "PR_BODY = $PR_BODY"
        # shopt -s nocasematch
        if echo "$PR_BODY" | grep -iEq "$pattern"; then
        # if [[ "$PR_BODY" =~ "$pattern" ]]; then
            issue_num=$(echo "$PR_BODY" | grep -iE "$pattern" | head -n1 | grep -o -E "[0-9]+")
            echo "issue_num is : $issue_num"
        else
            echo "No Issue number detected hence failing the PR Validation check."
            if [[ $forked == true ]]; then
              echo "PR:Issue-verification-failed, exiting forcefully!"
              exit 1
            fi
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
        fi
        
        IFS="/" read -r -a url_parts <<< "$url"
        
        # Remove the last two elements (repos and the issue number)
        unset url_parts[-1]
        unset url_parts[-1]
        # Reattach the URL pieces
        url=$(IFS=/; echo "${url_parts[*]}")

        # Add the issue number to the URL
        url="${url}/issues/${issue_num}"
        echo "$url"
        response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
        if [[ "$response_code" -eq 200 ]]; then
          # Check if issue is open or closed
          text=$(curl -s "$url")
          echo "checking status of the issue"
          if [[ $(echo "$text" | jq -r '.state') == "open" ]]; then
            echo "Issue #$issue_num is open"
            echo "Issue reference found in the pull request body."
            if [[ $forked == true ]]; then
              echo "PR:Ready-to-Review, exiting gracefully"
              exit 0
            fi
            gh pr edit $PRNUM --remove-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --add-label "PR:Ready-to-Review"
            exit 0
          else
            echo "Issue #$issue_num is not open"
            if [[ $forked == true ]]; then
              echo "PR:Issue-verification-failed, exiting forcefully!"
              exit 1
            fi
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
          fi
        else
            echo "Invalid Response Code obtained - error code: $response_code"
            echo "No valid issue reference found in the pull request body."
            gh pr comment $PRNUM --body "PR is not linked to any issue, please make the corresponding changes in the body."
            if [[ $forked == true ]]; then
              echo "PR:Issue-verification-failed, exiting forcefully!"
              exit 1
            fi
            gh pr edit $PRNUM --add-label "PR:Issue-verification-failed"
            gh pr edit $PRNUM --remove-label "PR:Ready-to-Review"
            exit 1
        fi
    - name: Check SQL file format and duplicates
      shell: bash
      env: 
          pr_no: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          echo "GitHub Token: $GITHUB_TOKEN"
          
          # Fetch the latest changes from the main branch
          git fetch origin main
          pwd
          echo "hello world"
          # Get the list of changed SQL files
          git diff --name-only origin/main...HEAD
          git diff --name-only origin/main...HEAD | grep -E "^scripts/sql/" | wc -l
          echo "Hii Rishab"
          count=$(git diff --name-only origin/main...HEAD | grep -E'^scripts/sql/' | wc -l | tr -d '[:space:]')
          echo "count=" $count
          changed_files=$(git diff --name-only origin/main...HEAD | grep -E'^scripts/sql/')
          echo $changed_files
          
          # Check if there are any SQL files
          if [[ $changed_files == 0 ]] ; then
              echo "No SQL files found. Skipping this action."
              exit 0
          else 
              echo "Find files. Running this action"
          fi
          # Loop through changed SQL files
          for filename in $changed_files; do
            echo "Checking File: $filename"
            if [[ "$filename" =~ \.(up|down)\.sql$ ]]; then
              echo "File name is in the correct format: $filename"
            else
              echo "Error: File name is not in the correct format: $filename."
              gh pr comment $pr_no --body "Error: The SQL file name is not in the correct format: $filename."
              exit 1
            fi
            # Extract migration number
            migration_no=$(basename $filename | cut -d "_" -f 1)
            echo "Migration Number: $migration_no"
            migration_no=$(echo $filename | cut -d "/" -f 3 | cut -d "_" -f 1)
            echo "Migration Number: $migration_no"
            
            migration_files_of_this_no=$(ls | grep -iE $migration_no | wc -l)
            cd ../../
            echo "Current directory: $(pwd)"
            
            echo "Migration Number: $migration_no"
            echo "Number of files with this migration number: $migration_files_of_this_no"
            
            if [[ $migration_files_of_this_no == "2" ]] ; then
              echo "All looks good for this migration number."
            else 
               echo "Error: Migration number is repeated."
               gh pr comment $pr_no --body "Error: The SQL file number is duplicated: $migration_no."
               exit 1
            fi
          done
